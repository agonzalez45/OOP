#ifndef LA7_Object_h#define LA7_Object_h#include <iostream>using namespace std;//Forward declaration of Number and Wordclass Number;class Word;//The Object ADTclass Object {public:    virtual Object* multiply ( const Object* obj ) const = 0;    virtual void print() = 0;};//Define your Number and Word classes belowclass Number : public Object {public:    int num;    Number() {        num = 0;    }    Number(int num){        this->num = num;    }    virtual Object* multiply ( const Object* obj ) const;    virtual void print(){        cout << num << endl;    }};class Word : public Object {public:    string word;        Word(){        word = "";    }    Word(string word){        this->word = word;    }    virtual Object* multiply ( const Object* obj ) const{        Word w2;        Word* newWord = new Word();                if(typeid(w2) == typeid(*obj)) {            Object* n4 = const_cast<Object*>(obj);            Word* n5 = dynamic_cast<Word*>(n4);                        for(int i = 0; i < n5->word.length(); i++) {                newWord->word += word;            }        }                else {            Object* n4 = const_cast<Object*>(obj);            Number* n5 = dynamic_cast<Number*>(n4);                        for(int i = 0; i < n5->num; i++) {                newWord->word += word;            }        }                return newWord;    }    virtual void print(){        cout << word << endl;    }};Object* Number::multiply ( const Object* obj ) const{    Number n2 = 0;    Number* newNumber = new Number();        if(typeid(n2) == typeid(*obj)) {        Object* n4 = const_cast<Object*>(obj);        Number* n5 = dynamic_cast<Number*>(n4);                newNumber->num = num*n5->num;    }        else {        Object* n4 = const_cast<Object*>(obj);        Word* n5 = dynamic_cast<Word*>(n4);                Word* w = new Word();                for(int i = 0; i < num; i++) {            w->word += n5->word;        }                return (w);    }        return newNumber;}#endif